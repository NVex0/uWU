with open("Disassembly_Shellcode.txt", "r") as f:
    data = f.read()

with open(r"D:\ZZZ\CTF-Challenge\PWNABLE_VN\OldGame\OPCODE.txt", "rb") as f:
    opcode = f.read()


block = []
VM_order = [0xfa,0xf0,0xf9,0x78,0x94,0xca,0x58,0x00,0x30,0xd2,0xe8,0x61,0xce,0x40,0x8f,0x55,0xe4,0xba,0xa1,0x41,0xf7,0x3d,0x0b,0x24,0x4d,0xde,0x52,0x5e,0xa8,0xe3,0x97,0x9c,0xaf,0xee,0xf8,0xcb,0xb5,0x23,0x31,0xcd,0xe5,0x22,0x19,0xe0,0x73,0x5d,0x6a,0x2d,0x63,0xd6,0x85,0xda,0xe7,0x9d,0x74,0x1e,0x36,0x4f,0x0e,0xaa,0xa4,0xa6,0x21,0xdc,0x76,0x28,0x72,0x0a,0xa9,0xc8,0xd0,0xf1,0x39,0xd4,0x7a,0x80,0xe6,0x26,0x4c,0x7e,0x47,0x32,0xc4,0x9b,0xf4,0x87,0xb3,0xb8,0x51,0x9e,0xe2,0xf5,0xfd,0xed,0x16,0x2b,0xb0,0xad,0x29,0x06,0x33,0x86,0x7c,0x82,0x59,0xb6,0x75,0x57,0x34,0xbd,0xc6,0x4a,0xc9,0x54,0x2f,0x96,0x60,0xbc,0x53,0x3b,0x56,0x0d,0x3c,0xbe,0x05,0xb4,0xf2,0x3f,0x2a,0xc1,0xc0,0x69,0x44,0x89,0x65,0x10,0x7b,0x03,0xd8,0x5a,0x71,0x62,0x93,0x2e,0x8b,0xd3,0xfb,0xa3,0x81,0x8c,0x25,0xd9,0xb7,0xb9,0xcc,0x0f,0x15,0x1f,0xe1,0x68,0x6e,0xcf,0xa7,0x6b,0xac,0x38,0x04,0x98,0x35,0x64,0x08,0x95,0x1d,0x20]
VM_block = []
data = data.split("##########")

splited = []
for i in data:
    if "BLOCK" in i:
        if block != []:
            VM_block.append(block)
        block = []
    else:
        line = i.split("\n")
        for j in line:
            if j != []:
                if "0x3A00" in j or "0x3E" in j or "0x30" in j:
                    block.append(j)
VM_dict = dict(zip(VM_order, VM_block))
exist = []
exist_opcode = []
mapper = [[] for i in range(14)]
exi = 0
for op in opcode:
    if op not in exist_opcode:
        exist_opcode.append(op)
        try:
            dis_block = VM_dict[op]
            if dis_block not in exist:
                exist.append(dis_block)
                mapper[exi].append(op)
                exi += 1
            else:
                for j in range(len(exist)):
                    if dis_block == exist[j]:
                        mapper[j].append(op)
        except:
            continue
    else:
        continue

count = 1
for i in mapper:
    print(f"Instruction {count}: ", end = "")
    for j in i:
        print(hex(j), end = ", ")
    print("")
    count += 1


print(hex(18446744073709551614))
    

